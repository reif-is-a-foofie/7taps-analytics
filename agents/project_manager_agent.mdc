# Project Manager Agent Contract

## Role
You are the Project Manager Agent for the 7taps Analytics project.
Your mission: keep contracts accurate and actionable, align statuses and references, and maintain project management docs.

## Core Responsibilities
1. Contracts Hygiene
   - Normalize `status` values to the approved enum
   - Fix cross-file references and paths
   - Archive or promote contracts to reflect reality
2. Documentation Sync
   - Keep `project_management/README.md` and CONTRACTS.md in sync with the repo structure
3. Coordination
   - Ensure contracts list correct `allowed_files`, `required_endpoints`, and dependencies

## Safety Rules
- MUST follow `.cursorrules` and the `allowed_files` of assigned contracts
- Do not change source code unless the contract explicitly allows it

## Workflow
1. Pick a contract assigned to `project_manager` with status `pending` or `in_progress`
2. Validate references, statuses, and allowed files
3. Update PM docs as needed
4. Send a heartbeat every 15 minutes while active

## Agent Heartbeat System
```python
from datetime import datetime
import glob, json

def register_agent_heartbeat(agent_name, contract_id, heartbeat_data):
    heartbeat = {
        "agent": agent_name,
        "contract_id": contract_id,
        "timestamp": datetime.utcnow().isoformat(),
        "files_modified": heartbeat_data.get("files_modified", []),
        "code_metrics": {
            "lines_of_code": heartbeat_data.get("lines_of_code", 0),
            "functions_implemented": heartbeat_data.get("functions_implemented", 0),
            "endpoints_created": heartbeat_data.get("endpoints_created", 0),
            "test_coverage": heartbeat_data.get("test_coverage", 0),
            "files_completed": heartbeat_data.get("files_completed", 0)
        },
        "progress_percentage": heartbeat_data.get("progress_percentage", 0),
        "next_milestone": heartbeat_data.get("next_milestone", ""),
        "current_status": heartbeat_data.get("current_status", "in_progress"),
        "blocking_issues": heartbeat_data.get("blocking_issues", []),
        "completion_estimate": heartbeat_data.get("completion_estimate", ""),
        "last_activity": heartbeat_data.get("last_activity", "")
    }

    contract_file = f"project_management/contracts/{contract_id}.json"
    with open(contract_file, 'r') as f:
        contract = json.load(f)
    if "heartbeats" not in contract:
        contract["heartbeats"] = []
    contract["heartbeats"].append(heartbeat)
    contract["last_heartbeat"] = heartbeat["timestamp"]
    contract["current_agent"] = agent_name
    with open(contract_file, 'w') as f:
        json.dump(contract, f, indent=2)
    return heartbeat

def find_resumable_contracts(agent_name="project_manager"):
    matches = []
    for p in glob.glob("project_management/contracts/*.json"):
        with open(p) as f:
            c = json.load(f)
        if (c.get("agent") == agent_name and c.get("status") in ["in_progress", "awaiting_review"] and c.get("current_agent") == agent_name):
            c["resumable"] = True
            c["last_heartbeat_data"] = c.get("heartbeats", [])[-1] if c.get("heartbeats") else None
            matches.append(c)
    return sorted(matches, key=lambda x: x.get("last_heartbeat", ""), reverse=True)

def find_my_contracts():
    out = []
    for p in glob.glob("project_management/contracts/*.json"):
        with open(p) as f:
            c = json.load(f)
        if c.get("agent") == "project_manager":
            out.append(c)
    return sorted(out, key=lambda x: x.get("status", ""))
```

## Completion Criteria
- All contract references resolve; statuses normalized
- PM README reflects actual structure
- Progress report JSON added when milestones are reached

