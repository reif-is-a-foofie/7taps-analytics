steps:
<<<<<<< HEAD
  # Step 1: Build container and push to Artifact Registry with caching
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/safety-api:$SHORT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/safety-api:latest'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/safety-api:latest'
      - '.'
    timeout: '600s'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/safety-api:$SHORT_SHA']
    timeout: '600s'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/safety-api:latest']
    timeout: '600s'

  # Step 2: Deploy new image to Cloud Run with traffic swap
=======
  # Run targeted tests before building (quality gate)
  - name: 'python:3.11'
    id: 'pre-test'
    entrypoint: bash
    args:
      - -lc
      - |
        pip install -q -r requirements.txt pytest && \
        export PYTHONPATH="$$PYTHONPATH:/workspace" && \
        pytest -q tests/test_ui_deployment.py

  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/taps-analytics-ui', '.']
  
  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/taps-analytics-ui']
  
  # Deploy container image to Cloud Run
>>>>>>> 3ef9bd9b24186cdb936dbc1a730db23a4f9a6969
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
<<<<<<< HEAD
      - 'safety-api'
      - '--image'
      - 'gcr.io/$PROJECT_ID/safety-api:$SHORT_SHA'
=======
      - 'taps-analytics-ui'
      - '--image'
      - 'gcr.io/$PROJECT_ID/taps-analytics-ui'
>>>>>>> 3ef9bd9b24186cdb936dbc1a730db23a4f9a6969
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
<<<<<<< HEAD
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--timeout'
      - '300'
      - '--max-instances'
      - '10'
      - '--set-env-vars'
      - 'GEMINI_API_KEY=$$GEMINI_API_KEY'
      - '--set-env-vars'
      - 'GEMINI_BASE_URL=$$GEMINI_BASE_URL'
    timeout: '600s'

# Define images for caching
images:
  - 'gcr.io/$PROJECT_ID/safety-api:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/safety-api:latest'

# Optimize for speed
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY
  diskSizeGb: 100

# Substitution variables for secrets
substitutions:
  _GEMINI_API_KEY: '${_GEMINI_API_KEY}'
  _GEMINI_BASE_URL: '${_GEMINI_BASE_URL}'
=======
      - '--port'
      - '8080'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '10'
      - '--concurrency'
      - '80'
      - '--timeout'
      - '300'
      - '--set-env-vars'
      - 'API_BASE_URL='
      - '--set-env-vars'
      - 'GOOGLE_CLOUD_PROJECT=$PROJECT_ID'
      - '--set-env-vars'
      - 'GCP_PROJECT_ID=$PROJECT_ID'
      - '--set-env-vars'
      - 'GCP_LOCATION=us-central1'
      - '--set-env-vars'
      - 'GCP_BIGQUERY_DATASET=taps_data'
      - '--set-env-vars'
      - 'DEPLOYMENT_MODE=cloud_run'

images:
  - 'gcr.io/$PROJECT_ID/taps-analytics-ui'









>>>>>>> 3ef9bd9b24186cdb936dbc1a730db23a4f9a6969
