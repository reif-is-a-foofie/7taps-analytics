steps:
  # Step 1: Build container and push to Artifact Registry with caching
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/safety-api:$SHORT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/safety-api:latest'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/safety-api:latest'
      - '.'
    timeout: '600s'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/safety-api:$SHORT_SHA']
    timeout: '600s'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/safety-api:latest']
    timeout: '600s'

  # Step 2: Deploy new image to Cloud Run with traffic swap
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'safety-api'
      - '--image'
      - 'gcr.io/$PROJECT_ID/safety-api:$SHORT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--timeout'
      - '300'
      - '--max-instances'
      - '10'
      - '--set-env-vars'
      - 'GEMINI_API_KEY=$$GEMINI_API_KEY'
      - '--set-env-vars'
      - 'GEMINI_BASE_URL=$$GEMINI_BASE_URL'
    timeout: '600s'

# Define images for caching
images:
  - 'gcr.io/$PROJECT_ID/safety-api:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/safety-api:latest'

# Optimize for speed
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY
  diskSizeGb: 100

# Substitution variables for secrets
substitutions:
  _GEMINI_API_KEY: '${_GEMINI_API_KEY}'
  _GEMINI_BASE_URL: '${_GEMINI_BASE_URL}'
